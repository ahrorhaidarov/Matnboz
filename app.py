import streamlit as st
import re
import io

# –•–∞—Ä—Ñ“≥–æ–∏ –∏“∑–æ–∑–∞—Ç–¥–æ–¥–∞—à—É–¥–∞
allowed_chars = "—ë–π“õ—É–∫–µ–Ω–≥—à“≥–∑—Ö—ä—Ñ“∑–≤–∞–ø—Ä–æ–ª–¥–∂—ç—è—á—Å–º–∏—Ç”£–±—é“ì”Ø–Å–ô“ö–£–ö–ï–ù–ì–®“≤–ó–•–™–§“∑–í–ê–ü–†–û–õ–î–ñ–≠–Ø–ß–°–ú–ò–¢”¢–ë–Æ“í”Æ?.,"

# –ò—Å–ª–æ“≥ –∫–∞—Ä–¥–∞–Ω–∏ “≥–∞—Ä—Ñ“≥–æ–∏ –Ω–æ–¥—É—Ä—É—Å—Ç
fix_tajik_letters = {
    "r": "–∫",
    "—û": "”Ø",
    "—ô": "“∑",
    "–á": "”¢",
    "—ú": "“õ",
    "—ö": "“≥",
    "–Å": "–ï",
    "E": "–ï",
    "–é": "”Æ",
    "–å": "“ö",
    "c": "—Å",
    "—ó": "”£",
    "–ä": "“≤",
    "–â": "“∂",
    "–É": "“í",
    "—ì": "“ì"
}

def fix_sentence(sentence):
    fixed = ""
    for char in sentence:
        if char in fix_tajik_letters:
            fixed += fix_tajik_letters[char]
        else:
            fixed += char
    return fixed

def is_valid_sentence(sentence):
    for char in sentence:
        if char not in allowed_chars and not char.isspace():
            return False
    words = sentence.strip().split()
    return len(words) <= 15 and len(words) > 3

def remove_initial_uppercase(sentence):
    words = sentence.split()
    new_words = []
    found_real_start = False

    for word in words:
        if not word.isupper() or len(word) <= 2:
            found_real_start = True
        if found_real_start:
            new_words.append(word)
    return ' '.join(new_words)

def read_and_filter_sentences(text):
    text = re.sub(r'\s+', ' ', text)
    sentences = re.findall(r'[^.?\n]+[.?]', text)

    filtered_sentences = []
    for sentence in sentences:
        sentence = sentence.strip()
        sentence = fix_sentence(sentence)
        sentence = remove_initial_uppercase(sentence)
        if is_valid_sentence(sentence):
            filtered_sentences.append(sentence)

    return filtered_sentences

# ---- Streamlit UI ----
st.set_page_config(page_title="–ú–∞—Ç–Ω–±–æ–∑ - –§–∏–ª—Ç—Ä–∫—É–Ω–∏–∏ –º–∞—Ç–Ω“≥–æ", page_icon="üìñ", layout="centered")

st.markdown(
    """
    <style>
    .main {
        background-color: var(--bg-color, #f5f7fa);
        padding: 20px;
        border-radius: 10px;
    }
    .stButton>button {
        background-color: #4CAF50;
        color: white;
        font-size: 18px;
        padding: 10px 24px;
        border-radius: 10px;
        margin-top: 10px;
    }
    .stTextArea>div>div>textarea {
        background-color: var(--input-bg-color, #000000);
        color: var(--input-text-color, #ffffff);
        border: 2px solid #4CAF50;
        border-radius: 10px;
        padding: 10px;
        font-size: 16px;
        width: 100%;
        min-height: 200px;
    }
    .stTextArea>div>div>textarea:focus {
        outline: none;
        box-shadow: 0 0 5px rgba(76, 175, 80, 0.7);
    }
    /* Define CSS variables for light and dark themes */
    :root {
        --bg-color: #f5f7fa;
        --input-bg-color: #ffffff;
        --input-text-color: #000000;
    }
    @media (prefers-color-scheme: dark) {
        :root {
            --bg-color: #0f172a;
            --input-bg-color: #000000;
            --input-text-color: #ffffff;
        }
    }

    </style>
    """,
    unsafe_allow_html=True
)

# --- –°–∞—Ä–ª–∞–≤“≥–∞ ---
st.title("üìñ –ú–∞—Ç–Ω–±–æ–∑")
st.subheader("üéØ –ë–∞—Ä–Ω–æ–º–∞ –±–∞—Ä–æ–∏ “∑—É–¥–æ –≤–∞ —Ñ–∏–ª—Ç—Ä –∫–∞—Ä–¥–∞–Ω–∏ “∑—É–º–ª–∞“≥–æ –∞–∑ –º–∞—Ç–Ω–∏ –∫–∞–ª–æ–Ω")

st.write(
    "–ë–æ –∏—Å—Ç–∏—Ñ–æ–¥–∞ –∞–∑ **–ú–∞—Ç–Ω–±–æ–∑** —à—É–º–æ –º–µ—Ç–∞–≤–æ–Ω–µ–¥ –∞–∑ –º–∞—Ç–Ω“≥–æ–∏ –∫–∞–ª–æ–Ω “∑—É–º–ª–∞“≥–æ–∏ –º—É–≤–æ—Ñ–∏“õ—Ä–æ “∑—É–¥–æ –∫–∞—Ä–¥–∞, "
    "–æ–Ω“≥–æ—Ä–æ –¥–∞—Ä —à–∞–∫–ª–∏ —Ñ–∞–π–ª (.txt) –∑–∞—Ö–∏—Ä–∞ –∫—É–Ω–µ–¥."
)

# --- –ú–∞—Ç–Ω –≤–æ—Ä–∏–¥ –∫–∞—Ä–¥–∞–Ω ---
user_text = st.text_area("‚úèÔ∏è –ú–∞—Ç–Ω–∏ —Ö—É–¥—Ä–æ –¥–∞—Ä –∏–Ω “∑–æ –≤–æ—Ä–∏–¥ –Ω–∞–º–æ–µ–¥:", height=300)

# --- –¢—É–≥–º–∞–∏ –§–∏–ª—Ç—Ä –∫–∞—Ä–¥–∞–Ω ---
if st.button("üîç “∂—É–¥–æ–∫—É–Ω–∏–∏ “∂—É–º–ª–∞“≥–æ"):
    if user_text.strip() == "":
        st.warning("‚ö†Ô∏è –õ—É—Ç—Ñ–∞–Ω –∞–≤–≤–∞–ª –º–∞—Ç–Ω—Ä–æ –≤–æ—Ä–∏–¥ –∫—É–Ω–µ–¥!")
    else:
        filtered = read_and_filter_sentences(user_text)

        if filtered:
            result_text = "\n".join(filtered)
            result_bytes = result_text.encode('utf-8')
            result_file = io.BytesIO(result_bytes)

            st.success(f"‚úÖ “∂—É–º–ª–∞“≥–æ–∏ —Ñ–∏–ª—Ç—Ä—à—É–¥–∞: {len(filtered)} –∞–¥–∞–¥.")
            # Display the result
            with st.container(height=300):
                st.code(result_text, language='text')

            st.download_button(
                label="‚¨áÔ∏è –ë–æ—Ä–≥–∏—Ä–∏–∏ –Ω–∞—Ç–∏“∑–∞“≥–æ",
                data=result_file,
                file_name="–Ω–∞—Ç–∏“∑–∞.txt",
                mime="text/plain"
            )
        else:
            st.warning("‚ö†Ô∏è “∂—É–º–ª–∞–∏ –º—É–≤–æ—Ñ–∏“õ —ë—Ñ—Ç –Ω–∞—à—É–¥.")

# --- –ü–æ—ë–Ω ---
st.markdown("---")
st.caption("üöÄ –õ–æ–∏“≥–∞ –∞–∑ “∑–æ–Ω–∏–±–∏ –ê“≥—Ä–æ—Ä“∑–æ–Ω “≤. ‚Ä¢ –ë–∞—Ä–æ–∏ –∑–∞–±–æ–Ω–∏ —Ç–æ“∑–∏–∫”£ üáπüáØ ")
st.caption("–ê–ª–æ“õ–∞: alanjon1312@gmail.com")
